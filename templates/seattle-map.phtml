<!DOCTYPE html>
<html>
<head>

  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
   <meta name="viewport" content="height=device-height, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
   <style type="text/css" rel="stylesheet">
    
   </style>
  <title>Map Details</title>
  <link media="all" rel="stylesheet" href="./css/map-css.css" />
  <script type="text/javascript" src="./js/locuslabs.js"></script>
  <link media="all" rel="stylesheet" href="./css/all-20140602.css" />
  <link media="all" rel="stylesheet" href="./css/locuslabs.css"/>
  <?php echo "<script> var query = ".$poi.";  </script>"?> 
<script>
    var airportDatabase;
    var airport;
    var building;
    var floor;
    var map;
    var search_location;

    function getParameterByName(name) 
    {
        name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
            results = regex.exec(location.search);
        return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
    }

    function map_loaded(_map)
    {
        map = _map;

        // Show the floor specified by the query parameter 'floorId'
        var floorId = getParameterByName('floorId');
        if ( floorId ) {
          // The two subsequent lines are necessary to show a specific floor of a venue.

          // Hides all the floors.
          map.getView().hideAllFloors();

          // Shows the floor given.
          map.getView().showFloor( floorId );
        }
        
        // Get a search object for the airport.  Running it after a delay to avoid an initization race condition.
        
        var poiDatabase = airport.poiDatabase();
        var venue ;
         poiDatabase.getPoi(query,function(POI){
         venue = POI;
        });
        // Draw a circle in the venue.
        var circle = new locuslabs.maps.Circle({ 
                    position : venue.position,
                    radius : 2.0,
                    map : map,
                    fillColor : 'red',
                    strokeWeight : 1,
                    strokeColor : 'black',
                    zIndex : 5
                });
        // Pan and zoom the map to a more interesting part of the airport.
        map.getView().showPoiPopup(venue.poiId); 
        
        loading(false);
        setTimeout(modifyPopUpHeight, 50);
        CenterMap(map,venue); 


        
        // Print the location of clicks to the console
        // var listener = map.addListener('click',function (event) {
        // ;
        // });
    }

    function show_floor(_floor)
    {
        floor = _floor;

        // Render the map of the floor into the #map-canvas div.
        floor.loadMap(document.getElementById('map-canvas'),map_loaded);
    }

    function show_building(_building)
    {
        building = _building;

        // Get the list available floors for this building, then load and show the first one.
        var floors = building.listFloors();
        show_floor( building.loadFloor(floors[0].floorId ) );
    }

    function airport_loaded(_airport)
    {
        airport = _airport;
        // Get the list available buildings for this airport, then load the first one.
        var buildings = airport.listBuildings();
        show_building( airport.loadBuilding( buildings[0].buildingId ) );
    }
    function loading(state) {
      if (state) {
          console.log("document start loading");
          document.getElementById("loading-container").className = document.getElementById("loading-container").className.replace( /(?:^|\s)loader-hidden(?!\S)/g , '' );
      } else {
         console.log("document finished loading");
         document.getElementById("loading-container").className += " loader-hidden";
         document.getElementById("map-canvas").className = document.getElementById("map-canvas").className.replace( /(?:^|\s)hide-map(?!\S)/g , '' );
      }
    }
    function CenterMap(_map,_venue) {
      map = _map; 
      venue = _venue;
      map.setRadius(30);
      map.setCenter(new locuslabs.maps.LatLng(venue.position.latitude,venue.position.longitude));
      
    }

    document.addEventListener("DOMContentLoaded", function(event) 
    {
        loading(true);
        // Initialize the Account Id
        locuslabs.setup( { accountId:"A11F4Y6SZRXH4X" },function () {
          // Create an AirportDatabase object then load an airport.
          airportDatabase = new locuslabs.maps.AirportDatabase();
          var venueId = getParameterByName('venueId');
          if ( venueId ) {
            airportDatabase.loadAirport(venueId,airport_loaded);
          }
          else {
            airportDatabase.loadAirport('sea',airport_loaded);
           
          }
        });
    });



</script>
</head>
<body>
   <div id="loading-container" class="loader-hidden" style="
        height: 100%;
        width: 100%; 
        background-color: #191919;
        overflow: hidden;
        text-align: center;
        vertical-align: middle;">
     <div id="loader"></div>
     <div class="loading-label"> <p>loading.. </p> </div>
   </div>
    <div id="map-canvas" class"hide-map"></div>
  </div>
  </div>
</body>
<script  type="text/javascript" charset="utf-8">
    function modifyPopUpHeight() {
       var poipopUp = document.getElementsByClassName("ll_poi-box");
       var mapcontainer = document.getElementById("locuslabs-zoom-container").firstChild;
       
       if (poipopUp != null) {
        if (poipopUp["ll_poi-box"].style["top"] != "78vh") {
          poipopUp["ll_poi-box"].style["top"] = "78vh";
          mapcontainer.style.height = "150vh";
          setTimeout(modifyPopUpHeight, 50);
        }
      }else{setTimeout(modifyPopUpHeight, 50)};
    }
     
</script>
</html>
